import {copyFileSync, readFileSync} from 'fs';
import {deleteFile} from '@createdbyjurand/node-delete';
import {display, displayInTheMiddle} from '@createdbyjurand/node-display';
import {prefix} from '@createdbyjurand/node-prefix';

displayInTheMiddle('package-lock-json.node.mjs version 0.4.0');

/**
 * lockfileVersion
 * An integer version, starting at 1 with the version number of this document whose semantics were used when generating this package-lock.json.
 * Note that the file format changed significantly in npm v7 to track information that would have otherwise required looking in node_modules or the npm registry. Lockfiles generated by npm v7 will contain lockfileVersion: 2.
 *
 * No version provided: an "ancient" shrinkwrap file from a version of npm prior to npm v5.
 * 1: The lockfile version used by npm v5 and v6.
 * 2: The lockfile version used by npm v7, which is backwards compatible to v1 lockfiles.
 * 3: The lockfile version used by npm v7, without backwards compatibility affordances. This is used for the hidden lockfile at node_modules/.package-lock.json, and will likely be used in a future version of npm, once support for npm v6 is no longer relevant.
 *
 * Node.js version bundle with npm version https://nodejs.org/en/download/releases/
 * Node.js 18.6.0 npm 8.13.2
 * Node.js 17.9.1 npm 8.11.0
 * Node.js 16.16.0 npm 8.11.0
 * Node.js 15.14.0 npm 7.7.6
 * Node.js 14.20.0 npm 6.14.17
 * Node.js 13.14.0 npm 6.14.4
 * Node.js 12.22.12 npm 6.14.16
 * Node.js 11.15.0 npm 6.7.0
 * Node.js 10.24.1 npm 6.14.12
 * Node.js 9.11.2 npm 5.6.0
 * Node.js 8.17.0 npm 6.13.4
 * Node.js 7.10.1 npm 4.2.0
 * Node.js 6.17.1 npm 3.10.10
 */

const prefixString = 'package-lock.json';

export const parsePackageLockJsonFile = (scopePrefixString, scopePrefixSpace = '') => {
  display(
    `${prefix(
      scopePrefixString,
      scopePrefixSpace
    )} parsePackageLockJsonFile(scopePrefixString, scopePrefixSpace = '') {`,
    '[   OK   ]'
  );

  display(`${prefix(scopePrefixString, scopePrefixSpace)}   Reading File Synchronously...`, '[   OK   ]');
  const scopePackageLockJsonFile = readFileSync('./package-lock.json', 'utf-8');
  display(`${prefix(scopePrefixString, scopePrefixSpace)}   Reading Success`, '[   OK   ]');

  display(`${prefix(scopePrefixString, scopePrefixSpace)}   Parsing...`, '[   OK   ]');
  const scopeParsedPackageLockJsonFile = JSON.parse(scopePackageLockJsonFile);
  display(`${prefix(scopePrefixString, scopePrefixSpace)}   Parsing Success`, '[   OK   ]');

  display(`${prefix(scopePrefixString, scopePrefixSpace)}   Returning parsed package-lock.json file`, '[   OK   ]');
  display(`${prefix(scopePrefixString, scopePrefixSpace)} }`, '[   OK   ]');
  return scopeParsedPackageLockJsonFile;
};

export const isPackageLockJsonCompatibleWithNodeVersion = scopeNodeVersion => {
  display(`${prefix(prefixString)} isPackageLockJsonCompatibleWithNodeVersion(scopeNodeVersion) {`, '[   OK   ]');

  const scopeParsedPackageLockJsonFile = parsePackageLockJsonFile(prefixString, '  ');

  display(
    `${prefix(prefixString)}   Checking if package-lock.json is compatible with Node version ${scopeNodeVersion}...`,
    '[   OK   ]'
  );
  if (
    (scopeNodeVersion >= 15 && +scopeParsedPackageLockJsonFile.lockfileVersion === 2) ||
    (scopeNodeVersion >= 8 && +scopeParsedPackageLockJsonFile.lockfileVersion === 1) ||
    (scopeNodeVersion <= 7 && scopeParsedPackageLockJsonFile.lockfileVersion === undefined)
  ) {
    display(`${prefix(prefixString)}   Is compatible`, '[   OK   ]');
  } else {
    displayError(`${prefix(prefixString)}   Is not compatible`, '[ FAILED ]');
  }

  display(`${prefix(prefixString)} }`, '[   OK   ]');

  return (
    (scopeNodeVersion >= 15 && +scopeParsedPackageLockJsonFile.lockfileVersion === 2) ||
    (scopeNodeVersion >= 8 && +scopeParsedPackageLockJsonFile.lockfileVersion === 1) ||
    (scopeNodeVersion <= 7 && scopeParsedPackageLockJsonFile.lockfileVersion === undefined)
  );
};

export const replacePackageLockJsonWithAVersionThatIsCompatibleWithNode = scopeNodeVersion => {
  display(
    `${prefix(prefixString)} replacePackageLockJsonWithAVersionThatIsCompatibleWithNode(scopeNodeVersion) {`,
    '[   OK   ]'
  );

  display(`${prefix(prefixString)}   Deleting...`, '[   OK   ]');
  deleteFile('package-lock.json');
  display(`${prefix(prefixString)}   Deleted`, '[   OK   ]');

  display(`${prefix(prefixString)}   Copying...`, '[   OK   ]');
  scopeNodeVersion >= 15 && copyFileSync('./node_scripts/package-lock-2.json', 'package-lock.json');
  scopeNodeVersion >= 8 && copyFileSync('./node_scripts/package-lock-1.json', 'package-lock.json');
  display(`${prefix(prefixString)}   Copied`, '[   OK   ]');

  display(`${prefix(prefixString)} }`, '[   OK   ]');
};

export const lockfileVersion = () => {
  display(`${prefix(prefixString)} lockfileVersion() {`, '[   OK   ]');

  const scopeParsedPackageLockJsonFile = parsePackageLockJsonFile(`${prefix(prefixString)}  `);

  display(`${prefix(prefixString)}   Returning package-lock.json lockfileVersion`, '[   OK   ]');
  display(`${prefix(prefixString)} }`, '[   OK   ]');
  return scopeParsedPackageLockJsonFile.lockfileVersion;
};
